@model GETAF.Models.Entities.Grupo
@{
    ViewData["Title"] = "Detalhes do Grupo";
    Layout = "_LayoutTopMenu";

    var isAdmin = Model.UsuarioId == ViewBag.IdUsuarioLogado;
    var idUsuarioLogado = ViewBag.IdUsuarioLogado;
}

<link rel="stylesheet" href="~/css/Grupo/DetalhesGrupo/Index.css" />
<script src="~/lib/Moment/moment.min.js"></script>

@Html.Partial("_LayoutTopGrupo", new GETAF.Models.ViewModel.MenuViewModel { Id = Model.Id, IsAdmin = isAdmin })

<div class="main-content">
    <div class="header">
        <div class="back-to-groups" onclick="RedirecionarGrupos()">
            <span id="back" class="material-symbols-outlined">arrow_back_ios</span>
            <a class="groups">Grupos</a>
        </div>
        <div class="infoGroup">
            <div class="group">@Model.Nome</div>
            <div class="descGroup">
                @Model.Descricao
            </div>
        </div>

        <br />

        <h1 class="title">Tarefas</h1>
        <h6 class="subtitle">Clique duas vezes na tarefa para editá-la!</h6>
    </div>

    <div id="quadroTarefas" class="container"></div>

    <div id="modal">
        <div class="box">
            <div class="head">
                <span id="creationModeTitle">Nova tarefa</span>
                <span id="editingModeTitle">Editar tarefa</span>
                <button class="material-icons" onclick="closeModal()">
                    close
                </button>
            </div>

            <div class="form">
                <input type="hidden" id="idInput">

                <div class="form-group">
                    <label for="title">Título</label>
                    <input id="title" placeholder="Digite o título..." />
                </div>

                <div class="form-group">
                    <label for="description">Descrição</label>
                    <textarea id="description" rows="3" placeholder="Digite a descrição..."></textarea>
                </div>

                <div class="form-group">
                    <label for="priority">Prioridade</label>
                    <select id="priority">
                        <option value="-1">Selecione</option>
                        <option value="1">Baixa</option>
                        <option value="2">Média</option>
                        <option value="3">Alta</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="column">Card</label>
                    <select id="column">
                        <option value="1">A Fazer</option>
                        <option value="2">Em andamento</option>
                        <option value="3">Finalizado</option>
                        <option value="4">Arquivado</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="deadline">Prazo</label>
                    <input type="date" id="deadline">
                </div>

                <button class="primary" onclick="createTask()" id="creationModeBtn">Cadastrar</button>
                <div id="divEditingBtns">
                    <button class="primary" onclick="openModalExcluir()" id="deleteModeBtn">Excluir tarefa</button>
                    <button class="primary" onclick="updateTask()" id="editingModeBtn">Salvar alterações</button>
                </div>
            </div>

        </div>
    </div>

    <div id="modalExcluir">
        <div class="box">
            <div class="head">
                <span>Confirmação de exclusão</span>
                <button class="material-icons" onclick="closeModalExcluir()">
                    close
                </button>
            </div>

            <p>Tem certeza que deseja excluir a tarefa {titulo}?</p>
            <div class="modalExcluirbuttons">
                <button class="primary" id="btnCancelDelete" onclick="closeModalExcluir()">Cancelar</button>
                <button class="primary" id="btnDelete" onclick="confirmDelete()">Excluir</button>
            </div>
        </div>
    </div>

</div>

<script>

    function buscarTarefas() {
        $.ajax({
            url: '@Url.Action("ListarTarefas", "Tarefa")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            type: "POST",
            data: JSON.stringify({
                grupoId: @Model.Id
            }),
            success: function (retorno) {
                 taskList = retorno.tarefas.map(tarefa => {
                    return {
                        id: tarefa.id,                     
                        title: tarefa.nome.trim(),         
                        description: tarefa.descricao.trim(), 
                        priority: tarefa.dificuldadeId,    
                        deadline: tarefa.dtFim,            
                        column: tarefa.cdStatus            
                    };
                });

                generateCards();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert('Erro ao buscar as tarefas');
            }
        });
    }



    function BuscarQuadroTarefas() {
        $.ajax({
            url: `@Url.Action("BuscarQuadroTarefas", "Grupo")`,
            contentType: "application/json; charset=utf-8",
            type: "POST",
            success: function (data) {
                const quadroTarefasContainer = document.getElementById("quadroTarefas");
                quadroTarefasContainer.innerHTML = data;
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert('Algo deu errado ao tentar buscar o quadro de tarefas');
            }
        });
    }

    window.onload = function () {
        BuscarQuadroTarefas();
        buscarTarefas();
    };

    

    const $modal = document.getElementById('modal');
    const $modalExcluir = document.getElementById('modalExcluir');
    const $titleInput = document.getElementById('title');
    const $descriptionInput = document.getElementById('description');
    const $priorityInput = document.getElementById('priority');
    const $deadlineInput = document.getElementById('deadline');
    const $columnInput = document.getElementById('column');
    const $idInput = document.getElementById("idInput");

    const $creationModeTitle = document.getElementById('creationModeTitle');
    const $editingModeTitle = document.getElementById('editingModeTitle');

    const $creationModeBtn = document.getElementById('creationModeBtn');
    const $editingModeBtn = document.getElementById('editingModeBtn');
    const $deleteModeBtn = document.getElementById('deleteModeBtn');


    // var tasks = localStorage.getItem("tasks");

    var taskList = [];

    generateCards();

    function openModal(data_column) {
        $modal.style.display = "flex";

        $columnInput.value = data_column;

        $creationModeTitle.style.display = "block";
        $creationModeBtn.style.display = "block";

        $editingModeTitle.style.display = "none";
        $editingModeBtn.style.display = "none";
        $deleteModeBtn.style.display = "none";

        $columnInput.disabled = true;
    }

    var idtarefa = null;
    function openModalToEdit(id) {
        $modal.style.display = "flex";

        $creationModeTitle.style.display = "none";
        $creationModeBtn.style.display = "none";

        $editingModeTitle.style.display = "block";
        $editingModeBtn.style.display = "block";
        $deleteModeBtn.style.display = "block";


        $columnInput.disabled = false;

        const index = taskList.findIndex(function (task) {
            return task.id == id;
        });

        idtarefa = index;
        const task = taskList[index];
        $idInput.value = task.id;
        $titleInput.value = task.title;
        $descriptionInput.value = task.description;
        $priorityInput.value = task.priority;
        const deadlineDate = task.deadline.split('T')[0];
        $deadlineInput.value = deadlineDate; 
        $columnInput.value = task.column;
    }

    function closeModal() {
        $modal.style.display = "none";

        $idInput.value = "";
        $titleInput.value = "";
        $descriptionInput.value = "";
        $priorityInput.value = -1;
        $deadlineInput.value = "";
        $columnInput.value = "";
    }

    function closeModalExcluir() {
        $modalExcluir.style.display = "none";
    }

    function openModalExcluir() {
        $modalExcluir.style.display = "flex";
    }

    function confirmDelete() {
        $.ajax({
            url: '@Url.Action("ExcluirTarefa", "Tarefa")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            type: "POST",
            data: JSON.stringify({
                id: $idInput.value
            }),
            success: function (retorno) {
                if (retorno.sucesso) {
                    closeModalExcluir();
                    closeModal();
                    taskList.splice(idtarefa, 1);
                    idtarefa = null;
                    generateCards();
                }
                else {
                    alert(retorno.mensagem)
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert('Algo deu errado');
            }
        });     
    }

    function resetColumns() {
        const columns = [1, 2, 3, 4];
        columns.forEach(columnNumber => {
            const column = document.querySelector(`[data-column="${columnNumber}"] .body .cards_list`);
            if (column) { // Verifica se o elemento existe
                column.innerHTML = '';
            }
        });
    }

    function generateCards() {
        resetColumns();

        taskList.forEach(function (task) {
            const formattedDate = moment(task.deadline).format('DD/MM/YYYY');

            const columnBody = document.querySelector(`[data-column="${task.column}"] .body .cards_list`);
            if (!columnBody) { // Verifica se columnBody existe
                console.warn(`Elemento com data-column="${task.column}" não encontrado no DOM.`);
                return;
            }
            const niveis = ['Baixa', 'Média', 'Alta'];

            const card = `
                <div
                    id="${task.id}"
                    class="card"
                    ondblclick="openModalToEdit(${task.id})"
                    draggable="true"
                    ondragstart="dragstart_handler(event)"
                >
                    <div class="info">
                        <b>Título</b>
                        <span>${task.title}</span>
                    </div>
                    <div class="info">
                        <b>Descrição</b>
                        <span>${task.description}</span>
                    </div>
                    <div class="info">
                        <b>Prioridade</b>
                        <span>${niveis[task.priority-1]}</span>
                    </div>
                    <div class="info">
                        <b>Prazo</b>
                        <span>${formattedDate}</span>
                    </div>
                </div>
            `;

            columnBody.innerHTML += card;
        });
    }


    function createTask() {
        if (!validarCampos()) {
            return;
        }


        const newTask = {
            id: Math.floor(Math.random() * 9999999),
            title: $titleInput.value,
            description: $descriptionInput.value,
            priority: $priorityInput.value,
            deadline: $deadlineInput.value,
            column: $columnInput.value,
        }


        $.ajax({
            url: '@Url.Action("AddTarefa", "Tarefa")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            type: "POST",
            data: JSON.stringify({
                nome: $titleInput.value,
                descricao: $descriptionInput.value,
                dtFim: $deadlineInput.value,
                cdStatus: $columnInput.value,
                usuarioId: @idUsuarioLogado,
                grupoId: @Model.Id,
                dificuldadeId: $priorityInput.value
            }),
            success: function (retorno) {
                if (retorno.sucesso) {
                    buscarTarefas();
                }
                else {
                    alert(retorno.mensagem)
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert('Algo deu errado');
            }
        });

        taskList.push(newTask);

        // localStorage.setItem("tasks", JSON.stringify(taskList));

        closeModal();
        generateCards();
    }

    function updateTask() {
        if (!validarCampos()) {
            return;
        }

        const task = {
            id: $idInput.value,
            title: $titleInput.value,
            description: $descriptionInput.value,
            priority: $priorityInput.value,
            deadline: $deadlineInput.value,
            column: $columnInput.value,
        }

        const index = taskList.findIndex(function (task) {
            return task.id == $idInput.value;
        });

        taskList[index] = task;

        $.ajax({
            url: '@Url.Action("UpdateTarefa", "Tarefa")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            type: "POST",
            data: JSON.stringify({
                id: task.id,
                nome: task.title,
                descricao: task.description,
                dtFim: task.deadline,
                cdStatus: task.cdStatus,
                usuarioId: @idUsuarioLogado,
                grupoId: @Model.Id,
                dificuldadeId: task.priority
            }),
            success: function (retorno) {
                if (retorno.sucesso) {
                    closeModal();
                    generateCards();
                }
                else {
                    alert(retorno.mensagem)
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert('Algo deu errado');
            }
        });
        // localStorage.setItem("tasks", JSON.stringify(taskList));   
    }

    function changeColumn(task_id, column_id) {
        if (task_id && column_id) {
            taskList = taskList.map((task) => {
                if (task_id != task.id) return task;

                return {
                    ...task,
                    column: column_id,
                };
            });
        }

        $.ajax({
            url: '@Url.Action("AtualizarStatusTarefa", "Tarefa")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            type: "POST",
            data: JSON.stringify({
                id: task_id,
                cdStatus: column_id,
            }),
            success: function (retorno) {
                if (retorno.sucesso) {
                    generateCards();
                }
                else {
                    alert(retorno.mensagem)
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert('Algo deu errado');
            }
        });
    }

    function validarCampos() {
        if ($titleInput.value.length == 0) {
            alert('O título é obrigatório!');
            return false;
        }

        if ($descriptionInput.value.length == 0) {
            alert('A descrição é obrigatória!');
            return false;
        }

        if ($priorityInput.value == -1) {
            alert('A prioridade é obrigatória!');
            return false;
        }

        if (!$deadlineInput.value) {
            alert('A data é obrigatória!');
            return false;
        }
        return true;
    }

    function dragstart_handler(ev) {
        console.log(ev);

        ev.dataTransfer.setData("my_custom_data", ev.target.id);
        ev.dataTransfer.effectAllowed = "move";
    }

    function dragover_handler(ev) {
        ev.preventDefault();
        ev.dataTransfer.dropEffect = "move";
    }

    function drop_handler(ev) {
        ev.preventDefault();
        const task_id = ev.dataTransfer.getData("my_custom_data");
        const column_id = ev.target.dataset.column;

        changeColumn(task_id, column_id);

    }
</script>
